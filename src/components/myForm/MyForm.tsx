import { useFormik } from 'formik';
import { FC, useContext } from 'react';
import * as Yup from 'yup';
import styles from './myForm.module.css';
import { UserContext } from '../userContext/UserContext';


interface IFormValues {
  firstName: string;
  lastName: string;
  email: string;
}

const MyForm: FC = () => {
  // –≤—ã–∑—ã–≤–∞–µ–º —Ö—É–∫ useContext –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  // –ø–µ—Ä–µ–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  // –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

  const {setUser} = useContext(UserContext)

  // –æ–ø–∏—Å–∞–ª–∏ —Å—Ö–µ–º—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏üë®‚Äç‚öïÔ∏è
  const schema = Yup
    .object()
    .shape({
      // firstName —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
      firstName: Yup
        .number()
        .typeError('–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —Ä–æ–±–æ—Ç üë®‚Äç‚öïÔ∏è')
        .required('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
        .min(100, '—Ç–≤–æ—è –º–æ–¥–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ 100!')
        .max(1000, '—Ç—ã –Ω–µ —Ç–∞–∫–æ–π –Ω–æ–≤—ã–π —Ä–æ–±–æ—Ç! –º–æ–¥–µ–ª—å –¥–æ 1000...'),
      // lastName —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
      lastName: Yup
        .string()
        .required('–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ–∑–¥–∞—Ç–µ–ª—è!'),
      // email —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç email, –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
      email: Yup
        .string()
        .email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
        .required('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    });


  const formik = useFormik(
    {
      initialValues: {
        firstName: '',
        lastName: '',
        email: '',
      } as IFormValues,
      // –¥–æ–±–∞–≤–∏–ª–∏ —Å—Ö–µ–º—É –≤ formik
      validationSchema: schema,
      // –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      // —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É
      // –∞ –Ω–µ –Ω–∞ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      validateOnChange: false,
      onSubmit: (values: IFormValues) => {
        // –∑–¥–µ—Å—å –º–æ–≥ –±—ã –±—ã—Ç—å fetch –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–µ–∫
        // –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ api
        setUser(values)
        console.log(values);
      }
    });




  return (
    <form onSubmit={formik.handleSubmit} className={styles.container}>
      <label htmlFor="">–≠—Ç–æ —Ñ–æ—Ä–º–∞ –¥–ª—è ü§ñ</label>
      <input
        type="text"
        placeholder='—Ç–≤–æ–π –Ω–æ–º–µ—Ä'
        id='firstName'
        onChange={formik.handleChange}
        value={formik.values.firstName} />
      <input
        type="text"
        placeholder='—Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å'
        id='lastName'
        onChange={formik.handleChange}
        value={formik.values.lastName}
      />
      <input
        type="text"
        placeholder='email –∫–æ–º–ø–∞–Ω–∏–∏'
        id='email'
        onChange={formik.handleChange}
        value={formik.values.email}
      />
      <button type='submit'>send data üì≤</button>
      <span>{formik.errors.email}</span>
      <span>{formik.errors.firstName}</span>
      <span>{formik.errors.lastName}</span>
    </form>

  );
};

export default MyForm;
